#!/usr/bin/env python3
"""
Script para reorganizar la estructura de carpetas del proyecto CRYPT-FLOWER.

Este script ayuda a migrar los archivos de las carpetas duplicadas a una nueva
estructura más clara y organizada.
"""

import os
import shutil
import re
from pathlib import Path

# Definir la estructura de carpetas destino
NEW_STRUCTURE = {
    "src": {
        "api": {},
        "core": {
            "encryption": {},
            "signatures": {},
            "key_management": {},
            "post_quantum": {},
            "hsm": {},
            "audit": {},
            "benchmark": {},
        },
        "file_handlers": {},
        "plugins": {},
        "ui": {
            "cli": {},
            "gui": {},
        },
        "utils": {},
    },
    "tests": {
        "unit": {},
        "integration": {},
        "security": {},
    }
}

# Mapeo de carpetas antiguas a nuevas
FOLDER_MAPPING = {
    "src (1)/core": "src/core",
    "src (1)/core (1)": "src/core",
    "src (1)/file_handlers (1)": "src/file_handlers",
    "src (1)/ui": "src/ui",
    "src (1)/ui (1)": "src/ui",
    "src (1)/utils (1)": "src/utils",
    "src (1)/api": "src/api",
    "src (1)/plugins": "src/plugins",
    "src/security_tests": "tests/security",
    "src/ui": "src/ui",
}

# Mapeo de archivos específicos
FILE_MAPPING = {
    "src (1)/core/post_quantum.py": "src/core/post_quantum/base.py",
    "src (1)/core/post_quantum_extended.py": "src/core/post_quantum/extended.py",
    "src (1)/core (1)/encryption (1).py": "src/core/encryption/engine.py",
    "src (1)/core (1)/signatures (1).py": "src/core/signatures/engine.py",
    "src (1)/core (1)/key_management (1).py": "src/core/key_management/manager.py",
    "src (1)/core (1)/crypto_audit.py": "src/core/audit/logger.py",
    "src (1)/core (1)/crypto_benchmark.py": "src/core/benchmark/engine.py",
    "src (1)/core (1)/hybrid_crypto.py": "src/core/encryption/hybrid.py",
    "src (1)/core/hsm_key_manager.py": "src/core/hsm/key_manager.py",
    "src (1)/core (1)/pkcs11_interface.py": "src/core/hsm/pkcs11_interface.py",
    "src (1)/file_handlers (1)/text_handler (1).py": "src/file_handlers/text_handler.py",
    "src (1)/file_handlers (1)/pdf_handler (1).py": "src/file_handlers/pdf_handler.py",
    "src (1)/ui (1)/cli (1).py": "src/ui/cli/main.py",
    "src (1)/main (1).py": "src/main.py",
}

def create_directory_structure(base_path, structure):
    """Crear la estructura de directorios."""
    for dir_name, sub_dirs in structure.items():
        dir_path = os.path.join(base_path, dir_name)
        os.makedirs(dir_path, exist_ok=True)
        
        # Crear archivo __init__.py en cada directorio
        init_file = os.path.join(dir_path, "__init__.py")
        if not os.path.exists(init_file):
            with open(init_file, "w") as f:
                f.write("# Automatically generated by reorganize_project.py\n")
        
        # Crear subdirectorios
        if sub_dirs:
            create_directory_structure(dir_path, sub_dirs)

def copy_file(src_path, dest_path):
    """Copiar un archivo y crear los directorios necesarios."""
    os.makedirs(os.path.dirname(dest_path), exist_ok=True)
    shutil.copy2(src_path, dest_path)
    print(f"Copiado: {src_path} -> {dest_path}")

def update_imports(file_path, old_prefix, new_prefix):
    """Actualizar las importaciones en un archivo."""
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Patrón para encontrar importaciones
    pattern = r'from\s+{0}([\.\w]+)\s+import'.format(re.escape(old_prefix))
    replacement = r'from {0}\1 import'.format(new_prefix)
    
    # Reemplazar importaciones
    new_content = re.sub(pattern, replacement, content)
    
    # Guardar el archivo si ha cambiado
    if new_content != content:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        print(f"Actualizadas importaciones en: {file_path}")

def main():
    """Función principal."""
    # Obtener el directorio base del proyecto
    base_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Crear la nueva estructura de directorios
    create_directory_structure(base_dir, NEW_STRUCTURE)
    print("Estructura de directorios creada.")
    
    # Copiar archivos según el mapeo de carpetas
    for old_folder, new_folder in FOLDER_MAPPING.items():
        old_path = os.path.join(base_dir, old_folder)
        new_path = os.path.join(base_dir, new_folder)
        
        if os.path.exists(old_path):
            # Crear el directorio destino si no existe
            os.makedirs(new_path, exist_ok=True)
            
            # Copiar archivos
            for root, _, files in os.walk(old_path):
                for file in files:
                    # Comprobar si el archivo tiene un mapeo específico
                    rel_path = os.path.relpath(os.path.join(root, file), base_dir)
                    if rel_path in FILE_MAPPING:
                        # Usar el mapeo específico
                        dest_path = os.path.join(base_dir, FILE_MAPPING[rel_path])
                        copy_file(os.path.join(root, file), dest_path)
                    else:
                        # Usar el mapeo de carpetas
                        rel_dir = os.path.relpath(root, old_path)
                        dest_dir = os.path.join(new_path, rel_dir)
                        os.makedirs(dest_dir, exist_ok=True)
                        copy_file(os.path.join(root, file), os.path.join(dest_dir, file))
    
    print("Archivos copiados según el mapeo.")
    
    # Actualizar importaciones en los archivos
    for root, _, files in os.walk(os.path.join(base_dir, "src")):
        for file in files:
            if file.endswith(".py"):
                file_path = os.path.join(root, file)
                # Actualizar importaciones
                update_imports(file_path, "..core (1)", "..core")
                update_imports(file_path, "..file_handlers (1)", "..file_handlers")
                update_imports(file_path, "..ui (1)", "..ui")
                update_imports(file_path, "..utils (1)", "..utils")
    
    print("Importaciones actualizadas.")
    
    print("\nReorganización completada. Por favor, verifica que todo funcione correctamente.")
    print("Nota: Este script no elimina las carpetas originales. Debes hacerlo manualmente después de verificar que todo funciona.")

if __name__ == "__main__":
    main()
